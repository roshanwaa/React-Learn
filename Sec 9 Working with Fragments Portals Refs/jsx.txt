TODO: 
  JSX Limitations :-{
    return (
        <h2>Hi There</h2>
        <p>This dose not work in the current state of the application.</p>
    );

    => you cant return more than one "root" jsx element (you also cant store more than one "root" jsx element in the current state of the application Variable.).

    "So if you return a value or if you store a value in a variable or in a constant or in a property that value must only be exactly one JSX element.
    Now that one element which you are allowed to have may of course have more children which then also can be adjacent to each other."
    

    Because this also isn’t valid JavaScript :-

        return ( ;
            React.createElement(‘h2’, {}, ‘Hi there!’)
            React.createElement(‘p’, {}, ‘This does not work :-(‘)
        );
    "your JSX code translates into React create element And you must only have one React create element call which you return. Now any nested JSX elements so inside of that one root element could be side by side because into the React create element world those children of that root element would be the third and fifth and so on argument."
} 

****************************************************************************

TODO: 
But because of that natural limitation of JavaScript we must only have one root JSX element.

The Solution: {
  Always warp adjacent elements.
        return (
            <div>
                <h2>Hi there</h2>
                <p>This dose not work :-</p>
            </div>
        );
        important: Doesn't have to be a <div></div> = ANY element will do the trick.
}

****************************************************************************

TODO: 
A new problem: "<div></div>" Soup{
    <div>
         <div>
            <div>
                <div>
                    <h2>
                        Some Content - Yeah, this can really happen.
                    </h2>
                </div>
            </div>
         </div>
    </div>
    ------------------------------------------------------------------

    "In Bigger app, you can easily end up with tons of unnecessary <div></div> elements (Or other element) which add no semantic meaning to the page but are only there because of the React's / JSX requirements."
    
}

****************************************************************************

TODO: 
Introducing React Fragments: {
    Syntax: 
        return (
            <React.Fragment>
                <h2>Hi there</h2>
                <p>This dose not work :-</p>
            </React.Fragment>
        );

----------------------+++++++++------------------------
                        Or
    Shortcut: 
        return (
            <>
                <h2>Hi there</h2>
                <p>This dose not work :-</p>
            </>
        );

---------------------------------------------------------

    "It's an empty wrapper  component:
            It's doesn't render any real HTML element the DOM. But it fulfills React's / JSX requirements."

}

Understanding React portals {
    Its a bit like styling a <div> like a button a nd adding an event listener to it: it'll work, but its but its not a good practice. 
    Syntax: 
            <div onClick={onClickHandler}>Click me im a bad button</div>
            
}